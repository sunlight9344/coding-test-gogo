from collections import deque

N = int(input())

tree = {}
parent = [-1]*(N+1)
for _ in range(N):
    node,left,right= map(int,input().split())
    tree[node] = (left,right)
    if left != -1:
        parent[left] = node
    if right != -1:
        parent[right] = node

root = 0
for i in range(1,N+1):
    if parent[i] == -1:
        root = i

count = 1
scr = {}
def in_order(n,depth):
    global count
    left  = tree[n][0]
    right = tree[n][1]
    
    if left != -1:
        in_order(left,depth+1)
    
    print(n)
    if depth in scr:
        scr[depth].append(count)
    else:
        scr[depth] = [count]

    count += 1
    
    if right != -1:
        in_order(right,depth+1)

in_order(root,1)

width = 1
depth = N+1
for i in scr:
    s = max(scr[i])-min(scr[i])+1
    print(s)
    print(scr[i])
    if s >= width:
        width = s
        depth = min(depth,i)
print(depth,width)
        
    